
export import "std/vector.znn";
export import "vec2.znn";

export struct HistoryElem {
  vector<string> text;
  vec2 cursorBefore;
  vec2 cursorAfter;
};

export struct Buffer {
  vector<string> text;
  vector<HistoryElem> history;
  vector<HistoryElem> forward;
};

export Buffer(string content) {
  return Buffer::Buffer(breakLines(move(content)),
      vector<HistoryElem>(),
      vector<HistoryElem>());
}

export vector<string> breakLines(string content) {
  mutable ret = {""}.as_vector();
  for (c : content)
    if (*c == '\n')
      ret.push_back("");
    else
      *ret.back() += *c;
  return move(ret);
}

export string joinLines(Buffer* buffer) {
  mutable ret = "";
  for (it : buffer->text) {
    if (it.index > 0)
      ret += '\n';
    ret += *it;
  }
  return move(ret);
}


void addHistory(Buffer mutable* buf, vector<string> text, vec2 cursorBefore, vec2 cursorAfter) {
  buf->history.push_back(HistoryElem(move(text), cursorBefore, cursorAfter));
  buf->forward.clear();
}

export string getString(Buffer* buf, mutable vec2 startPos, mutable vec2 endPos) {
  if ((startPos.y == endPos.y && startPos.x > endPos.x) || startPos.y > endPos.y)
    swap(&startPos, &endPos);
  mutable ret = "";
  const origStartLine = startPos.y;
  while (startPos.y <= endPos.y) {
    if (!ret.empty())
      ret += "\n";
    const begin = startPos.y == origStartLine ? startPos.x : 0;
    ret += buf->text[startPos.y].substring(begin,
        (startPos.y == endPos.y ? endPos.x : buf->text[startPos.y].size()) - begin);
    ++startPos.y;
  }
  return move(ret);
}

export vec2 erase(Buffer mutable* buf, mutable vec2 startPos, mutable vec2 endPos) {
  if ((startPos.y == endPos.y && startPos.x > endPos.x) || startPos.y > endPos.y)
    swap(&startPos, &endPos);
  buf->addHistory(buf->text.copy(), endPos, startPos);
  buf->text[startPos.y] = buf->text[startPos.y].substring(0, startPos.x) +
      buf->text[endPos.y].substring(endPos.x, buf->text[endPos.y].size() - endPos.x);
  for (i : range(0, endPos.y - startPos.y))
    buf->text.remove(startPos.y + 1);
  return startPos;
}

export vec2? undo(Buffer mutable* buf, vec2 pos) {
  if (!buf->history.empty()) {
    const elem = buf->history.pop_back();
    buf->forward.push_back(HistoryElem(buf->text.copy(), elem.cursorBefore, elem.cursorAfter));
    buf->text = elem.text.copy();
    return elem.cursorBefore;
  }
  return null;
}

export vec2? redo(Buffer mutable* buf, vec2 pos) {
  if (!buf->forward.empty()) {
    const elem = buf->forward.pop_back();
    buf->history.push_back(HistoryElem(buf->text.copy(), elem.cursorBefore, elem.cursorAfter));
    buf->text = elem.text.copy();
    return elem.cursorAfter;
  }
  return null;
}

export vec2 onText(Buffer mutable* buf, string text, vec2 pos) {
  const newPos = pos + vec2(text.size(), 0);
  buf->addHistory(buf->text.copy(), pos, newPos);
  buf->text[pos.y] = buf->text[pos.y].insert(pos.x, text);
  return newPos;
}

export vec2 onEnter(Buffer mutable* buf, vec2 pos) {
  buf->addHistory(buf->text.copy(), pos, vec2(0, pos.y + 1));
  assert(pos.y >= 0 && pos.y < buf->text.size());
  buf->text.insert(pos.y + 1, "");
  if (pos.x < buf->text[pos.y].size()) {
    buf->text[pos.y + 1] = buf->text[pos.y].substring(pos.x, buf->text[pos.y].size() - pos.x);
    buf->text[pos.y] = buf->text[pos.y].substring(0, pos.x);
  }
  return vec2(0, pos.y + 1);
}

export vec2 onBackspace(Buffer mutable* buf, mutable vec2 pos) {
  const textCopy = buf->text.copy();
  const oldPos = pos;
  if (pos.x > 0) {
    buf->text[pos.y] = buf->text[pos.y].substring(0, pos.x - 1)
        + buf->text[pos.y].substring(pos.x, buf->text[pos.y].size() - pos.x);
    --pos.x;
  } else if (pos.y > 0) {
    pos.x = buf->text[pos.y - 1].size();
    buf->text[pos.y - 1] += buf->text[pos.y];
    buf->text.remove(pos.y);
    --pos.y;
  }
  buf->addHistory(move(textCopy), oldPos, pos);
  return pos;
}

export vec2 onDelete(Buffer mutable* buf, vec2 pos) {
  buf->addHistory(buf->text.copy(), pos, pos);
  if (pos.x < buf->text[pos.y].size()) {
    buf->text[pos.y] = buf->text[pos.y].substring(0, pos.x)
      + buf->text[pos.y].substring(pos.x + 1, buf->text[pos.y].size() - pos.x - 1);
  } else if (pos.x < buf->text.size() - 1) {
    buf->text[pos.y] += buf->text[pos.y + 1];
    buf->text.remove(pos.y + 1);
  }
  return pos;
}
