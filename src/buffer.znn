
export import "std/vector.znn";
import "vec2.znn";

export struct Buffer {
  vector<string> text;
};

export Buffer() {
  return Buffer::Buffer({""}.as_vector());
}

export void onEnter(Buffer mutable* buf, vec2 pos) {
  assert(pos.y >= 0 && pos.y < buf->text.size());
  buf->text.insert(pos.y + 1, "");
  if (pos.x < buf->text[pos.y].size()) {
    buf->text[pos.y + 1] = buf->text[pos.y].substring(pos.x, buf->text[pos.y].size() - pos.x);
    buf->text[pos.y] = buf->text[pos.y].substring(0, pos.x);
  }
}

export vec2 onBackspace(Buffer mutable* buf, mutable vec2 pos) {
  if (pos.x > 0) {
    buf->text[pos.y] = buf->text[pos.y].substring(0, pos.x - 1)
        + buf->text[pos.y].substring(pos.x, buf->text[pos.y].size() - pos.x);
    --pos.x;
  } else if (pos.y > 0) {
    pos.x = buf->text[pos.y - 1].size();
    buf->text[pos.y - 1] += buf->text[pos.y];
    buf->text.remove(pos.y);
    --pos.y;
  }
  return pos;
}

export vec2 onDelete(Buffer mutable* buf, vec2 pos) {
  if (pos.x < buf->text[pos.y].size()) {
    buf->text[pos.y] = buf->text[pos.y].substring(0, pos.x)
      + buf->text[pos.y].substring(pos.x + 1, buf->text[pos.y].size() - pos.x - 1);
  } else if (pos.x < buf->text.size() - 1) {
    buf->text[pos.y] += buf->text[pos.y + 1];
    buf->text.remove(pos.y + 1);
  }
  return pos;
}
