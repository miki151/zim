export import "ui/ui.znn";
import "std/vector.znn";
import "std/io.znn";
export import "buffer.znn";
import "std/char.znn";
import "std/time.znn";
export import "highlighter.znn";
export import "std/enum_map.znn";
export import "lsp_client.znn";
import "util.znn";

export [@ui_element]
struct EditorUI {
  int fontSize;
  int tabWidth;
  color selectionColor;
  color selectionMirrorColor;
  color textColor;
  color bracketHighlightColor;
  color trailingWhitespaceColor;
  color crColor;
  color tabColor;
  int mouseWheelStep;
  enum_map<TokenType, color> syntaxColors;
  enum_map<LspDiagnosticSeverity, color> errorColors;
};

export struct ClickEvent {
  milliseconds_t time;
  vec2 cursor;
};

ClickEvent implicit_copy(ClickEvent*) = default;

export struct CursorData {
  vec2 pos;
  int bufferIndex;
};

export CursorData implicit_copy(CursorData*) = default;

export void addCursorHistory(EditorUIState mutable* state, vec2 pos, int bufferIndex) {
  state^.cursorHistory.push_back(CursorData(pos, bufferIndex));
  state^.cursorForward.clear();
}

export struct SearchedTextInfo {
  string text;
  bool reverse;
};

export struct EditorUIState {
  bool mouseSelection = false;
  SearchedTextInfo? searchedText = null;
  vec2? searchedPos = null;
  ClickEvent lastLeftClick = ClickEvent(0, vec2(-1, -1));
  ClickEvent previousLeftClick = ClickEvent(0, vec2(-1, -1));
  vector<CursorData> cursorHistory = vector<CursorData>();
  vector<CursorData> cursorForward = vector<CursorData>();
  vec2? lastMousePos = null;
};

export struct EditorUIData {
  Buffer buffer;
  vec2 cursor;
  vec2 scrollPos;
  vec2? selectionStart;
  Highlighter* highlighter;
  vector<LspDiagnosticLocation> diagnostics;
};

vec2 getVisibleCursor(EditorUIData* data, Buffer* buffer) {
  return buffer^.trimCursor(data^.cursor);
}

void renderSelection(EditorUI* editor, UIContext context, rectangle* r, vec2 textSize) {
  const data = **context.data^.cast_to<EditorUIData mutable*>();
  if (!!data^.selectionStart && *data^.selectionStart != data^.cursor) {
    mutable startPos = *data^.selectionStart;
    mutable endPos = data^.getVisibleCursor(&data^.buffer);
    if ((startPos.y == endPos.y && startPos.x > endPos.x) || startPos.y > endPos.y)
      swap(&startPos, &endPos);
    const origStartLine = startPos.y;
    const renderLine = [&] (int line, int px, int kx) {
      const pos = r^.v1 + (vec2(px, line) - data^.scrollPos).pairwise_mult(textSize);
      const pos2 = r^.v1 + (vec2(kx, line) + vec2(0, 1) - data^.scrollPos).pairwise_mult(textSize);
      context.canvas^.fillRectangle(&rectangle(pos, pos2), &editor^.selectionColor);
    };
    while (startPos.y <= endPos.y) {
      renderLine(startPos.y, startPos.y == origStartLine ? startPos.x : 0,
          startPos.y == endPos.y ? endPos.x : data^.buffer.text[startPos.y].size());
      ++startPos.y;
    }
  }
}

void renderErrors(EditorUI* editor, UIContext context, rectangle* r, vec2 textSize) {
  const data = **context.data^.cast_to<EditorUIData mutable*>();
  const state = context.state^.get_state<EditorUIState>();
  for (diagnostic : data^.diagnostics) {
    mutable startPos = diagnostic^.startPos;
    mutable endPos = diagnostic^.endPos;
    const origStartLine = startPos.y;
    const renderLine = [&] (int line, int px, int kx) {
      const pos = r^.v1 + (vec2(px, line) + vec2(0, 1) - data^.scrollPos).pairwise_mult(textSize)
          - vec2(0, 2);
      const pos2 = r^.v1 + (vec2(kx, line) + vec2(0, 1) - data^.scrollPos).pairwise_mult(textSize);
      const errorColor = editor^.errorColors[diagnostic^.severity];
      context.canvas^.fillRectangle(&rectangle(vec2(r^.v1.x, pos.y), vec2(r^.v2.x, pos2.y)),
          &color(errorColor.r / 3, errorColor.g / 3, errorColor.b / 3));
      context.canvas^.fillRectangle(&rectangle(pos, pos2), &errorColor);
      if (!!state^.lastMousePos && state^.lastMousePos^.y == line) {
        const lines = breakLines(diagnostic^.text);
        const pos3 = vec2(r^.v1.x, pos.y - textSize.y * (2 + lines.size()));
        const pos4 = vec2(r^.v2.x, pos3.y + textSize.y * lines.size());
        context.canvas^.fillRectangle(&rectangle(pos3, pos4), &color(0, 0, 0));
        context.canvas^.frameRectangle(&rectangle(pos3, pos4), &color(255, 255, 255), 1);
        for (elem : lines)
          context.canvas^.drawText(pos3 + vec2(5, textSize.y * elem.index), *elem, editor^.fontSize, &errorColor);
      }
    };
    while (startPos.y <= endPos.y) {
      renderLine(startPos.y, startPos.y == origStartLine ? startPos.x : 0,
          startPos.y == endPos.y ? endPos.x : data^.buffer.text[startPos.y].size());
      ++startPos.y;
    }
  }
}

void scrollToSearchedText(UIContext context, rectangle* r, vec2 textSize) {
  const data = **context.data^.cast_to<EditorUIData mutable*>();
  const state = context.state^.get_state<EditorUIState>();
  if (state^.searchedPos) {
    data^.selectionStart = null;
    const line = min(max(0, state^.searchedPos^.y), data^.buffer.text.size() - 1);
    data^.cursor = vec2(state^.searchedPos^.x, line);
    if ((line - data^.scrollPos.y) * textSize.y > r^.height() || line < data^.scrollPos.y)
      data^.scrollPos = vec2(0, max(0, line - r^.height() / (2 * textSize.y)));
    state^.searchedPos = null;
  } else
  if (state^.searchedText) {
    for (lineIndex = 0; lineIndex < data^.buffer.text.size(); ++lineIndex) {
      const numLines = data^.buffer.text.size();
      const reverse = state^.searchedText^.reverse;
      const line = ((reverse ? -lineIndex - 1 : lineIndex) + data^.cursor.y + numLines) % numLines;
      const beginPos = (lineIndex == 0 && !reverse) ? data^.cursor.x + 1 : 0;
      if (const index = data^.buffer.text[line].find(beginPos, &state^.searchedText^.text)) {
        data^.selectionStart = vec2(*index, line);
        data^.cursor = vec2(*index + state^.searchedText^.text.size(), line);
        if ((line - data^.scrollPos.y) * textSize.y > r^.height() || line < data^.scrollPos.y)
          data^.scrollPos = vec2(0, max(0, line - r^.height() / (2 * textSize.y)));
        state^.searchedText = null;
        break;
      }
    }
  }
}

export string? getSelectedTextInLine(EditorUIData* data) {
  if (!!data^.selectionStart && data^.cursor.y == data^.selectionStart^.y &&
      data^.cursor.x != data^.selectionStart^.x) {
    return data^.buffer.text[data^.cursor.y].substring(
        min(data^.selectionStart^.x, data^.cursor.x), abs(data^.selectionStart^.x - data^.cursor.x));
  }
  return null;
}

char? getOtherBracket(char bracket) {
  if (bracket == '(')
    return ')';
  else if (bracket == '[')
    return ']';
  else if (bracket == '{')
    return '}';
  else if (bracket == ')')
    return '(';
  else if (bracket == ']')
    return '[';
  else if (bracket == '}')
    return '{';
  else
    return null;
}

vec2? findMatchingBracket(Buffer* buffer, vec2 cursor, char bracket) {
  mutable matching = try getOtherBracket(bracket);
  mutable cursor2 = cursor;
  mutable cnt = 1;
  const dir = bracket == '(' || bracket == '[' || bracket == '{' ? 1 : -1;
  while (true) {
    cursor2.x += dir;
    if (cursor2.x >= buffer^.text[cursor2.y].size()) {
      cursor2.x = 0;
      ++cursor2.y;
    }
    if (cursor2.x < 0) {
      --cursor2.y;
      if (cursor2.y < 0)
        break;
      cursor2.x = buffer^.text[cursor2.y].size() - 1;
    }
    if (cursor2.y >= buffer^.text.size() || cursor2.x >= buffer^.text[cursor2.y].size())
      break;
    const symbol2 = buffer^.text[cursor2.y][cursor2.x];
    if (symbol2 == bracket)
      ++cnt;
    else if (symbol2 == matching)
      --cnt;
    if (cnt == 0)
      return cursor2;
  }
  return null;
}

void highlightBrackets(EditorUI* editor, EditorUIData* data, UICanvas* canvas, mutable vec2 cursor, vec2 textSize,
    rectangle* r) {
  mutable cursor1 = cursor;
  mutable vec2? cursor2 = null;
  if (cursor.x < data^.buffer.text[cursor.y].size())
    cursor2 = data^.buffer.findMatchingBracket(cursor, data^.buffer.text[cursor.y][cursor.x]);
  if (!cursor2 && cursor.x > 0) {
    cursor1 = cursor - vec2(1, 0);
    cursor2 = data^.buffer.findMatchingBracket(cursor1, data^.buffer.text[cursor1.y][cursor1.x]);
  }
  if (cursor2) {
    const pos = r^.v1 + (cursor1 - data^.scrollPos).pairwise_mult(textSize);
    const pos2 = r^.v1 + (*cursor2 - data^.scrollPos).pairwise_mult(textSize);
    canvas^.fillRectangle(&rectangle(pos, pos + textSize), &editor^.bracketHighlightColor);
    canvas^.fillRectangle(&rectangle(pos2, pos2 + textSize), &editor^.bracketHighlightColor);
  }
}

void highlightSelectionMirror(EditorUI* editor, string selected, EditorUIData* data, UICanvas* canvas, vec2 textSize,
    rectangle* r, string* lineStr, int lineIndex) {
  for (ind = lineStr^.find(&selected); !!ind; ind = lineStr^.find(*ind + 1, &selected))
    if (lineIndex != data^.cursor.y || (*ind != data^.cursor.x && *ind != data^.selectionStart^.x)) {
      const spos = r^.v1 + textSize.pairwise_mult(vec2(*ind, lineIndex) - data^.scrollPos);
      canvas^.fillRectangle(&rectangle(spos, spos + vec2(selected.size() * textSize.x, textSize.y)),
          &editor^.selectionMirrorColor);
    }
}

void highlightTrailingChars(EditorUIData* data, UICanvas* canvas, vec2 textSize,
    rectangle* r, string* lineStr, int lineIndex, color color, char c) {
  const trailingSpace = [&] {
    for (i = lineStr^.size() - 1; i >= 0; --i)
      if (lineStr^[i] != c)
        return i + 1;
    return 0;
  }();
  const spos = r^.v1 + textSize.pairwise_mult(vec2(trailingSpace, lineIndex) - data^.scrollPos);
  canvas^.fillRectangle(&rectangle(spos, spos + textSize.pairwise_mult(vec2(lineStr^.size() - trailingSpace, 1))),
      &color);
}

export void render(EditorUI* editor, UIContext context, rectangle* r) {
  const data = **context.data^.cast_to<EditorUIData mutable*>();
  const textSize = context.canvas^.getTextSize(" ", editor^.fontSize);
  scrollToSearchedText(context, r, textSize);
  while (data^.scrollPos.y > 0 &&
      r^.v1.y + textSize.y * (data^.buffer.text.size() - data^.scrollPos.y) < r^.v2.y - 50)
    --data^.scrollPos.y;
  renderSelection(editor, context, r, textSize);
  const selected = getSelectedTextInLine(data);
  mutable highlighterState = data^.highlighter^.getInitialState();
  const cursor = data^.getVisibleCursor(&data^.buffer);
  if (!selected)
    highlightBrackets(editor, data, context.canvas, cursor, textSize, r);
  for (line : range(data^.scrollPos.y, data^.buffer.text.size())) {
    const pos = r^.v1 + (vec2(0, line) - data^.scrollPos).pairwise_mult(textSize);
    if (pos.y > r^.v2.y)
      break;
    const lineStr = &data^.buffer.text[line];
    if (selected)
      editor^.highlightSelectionMirror(*selected, data, context.canvas, textSize, r, lineStr, line);
    highlightTrailingChars(data, context.canvas, textSize, r, lineStr, line, editor^.trailingWhitespaceColor, ' ');
    highlightTrailingChars(data, context.canvas, textSize, r, lineStr, line, editor^.crColor, '\r');
    const tokens = data^.highlighter^.getTokens(&highlighterState, *lineStr);
    mutable length = 0;
    for (token : tokens) {
      mutable content = "";
      for (c : token^.getContent())
        if (*c == '\t') {
          const bgPos = pos + vec2((length + c.index) * textSize.x, 0);
          context.canvas^.fillRectangle(&rectangle(bgPos, bgPos + textSize), &editor^.tabColor);
          content += " ";
        } else
          content += *c;
      context.canvas^.drawText(pos + vec2(length * textSize.x, 0), content,
          editor^.fontSize, &editor^.syntaxColors[token^.getType()]);
      length += content.size();
    }
  }
  const cursorPos = r^.v1 + textSize.pairwise_mult(cursor - data^.scrollPos);
  context.canvas^.drawLine(cursorPos, cursorPos + vec2(0, textSize.y), &editor^.textColor);
  renderErrors(editor, context, r, textSize);
}

export bool onKeyEvent(EditorUI* editor, UIContext context, rectangle* r, key_event* event) {
  const state = context.state^.get_state<EditorUIState>();
  const data = **context.data^.cast_to<EditorUIData mutable*>();
  if (event^.type != key_event_type::DOWN)
    return false;
  const textSize = context.canvas^.getTextSize(" ", editor^.fontSize);
  const lalt = event^.modifiers.contains(key_event_modifier::LALT);
  const lctrl = event^.modifiers.contains(key_event_modifier::LCTRL);
  const lshift = event^.modifiers.contains(key_event_modifier::LSHIFT);
  if (event^.key == key_type::UP || event^.key == key_type::DOWN
      || event^.key == key_type::PAGE_UP || event^.key == key_type::PAGE_DOWN
      || event^.key == key_type::HOME || event^.key == key_type::END) {
    if (lshift) {
      if (!data^.selectionStart)
        data^.selectionStart = data^.getVisibleCursor(&data^.buffer);
    } else
      data^.selectionStart = null;
  }
  switch (event^.key) {
    case (ENTER) {
      data^.cursor = data^.buffer.onEnter(data^.getVisibleCursor(&data^.buffer), true);
    }
    case (BACKSPACE) {
      if (data^.selectionStart) {
        data^.cursor = data^.buffer.erase(*data^.selectionStart, data^.getVisibleCursor(&data^.buffer));
        data^.selectionStart = null;
      } else
        data^.cursor = data^.buffer.onBackspace(data^.getVisibleCursor(&data^.buffer), editor^.tabWidth);
    }
    case (DELETE) {
      if (data^.selectionStart) {
        data^.cursor = data^.buffer.erase(*data^.selectionStart, data^.getVisibleCursor(&data^.buffer));
        data^.selectionStart = null;
      } else {
        if (lctrl)
          data^.cursor = data^.buffer.onDeleteLine(data^.getVisibleCursor(&data^.buffer));
        else
          data^.cursor = data^.buffer.onDelete(data^.getVisibleCursor(&data^.buffer));
      }
    }
    case (HOME) {
      mutable indent = 0;
      for (c : data^.buffer.text[data^.cursor.y])
        if (*c == ' ')
          indent = c.index + 1;
        else
          break;
      if (data^.cursor.x == indent)
        data^.cursor.x = 0;
      else
        data^.cursor.x = indent;
    }
    case (END) {
      data^.cursor.x = data^.buffer.text[data^.cursor.y].size();
    }
    case (UP) {
      data^.cursor.y = max(0, data^.cursor.y - 1);
    }
    case (DOWN) {
      data^.cursor.y = min(data^.buffer.text.size() - 1, data^.cursor.y + 1);
    }
    case (PAGE_UP) {
      state^.addCursorHistory(data^.cursor, data^.buffer.index);
      data^.cursor.y = max(0, data^.cursor.y - r^.height() / textSize.y);
    }
    case (PAGE_DOWN) {
      state^.addCursorHistory(data^.cursor, data^.buffer.index);
      data^.cursor.y = min(data^.buffer.text.size() - 1, data^.cursor.y + r^.height() / textSize.y);
    }
    case (TAB) {
      if (lalt)
        return false;
      if (data^.selectionStart) {
        data^.buffer.changeIndent(*data^.selectionStart, data^.cursor,
            lshift ? -editor^.tabWidth : editor^.tabWidth);
      } else
      if (lshift)
        data^.buffer.changeIndent(data^.cursor, data^.cursor, -editor^.tabWidth);
      else
        discard editor^.onTextEvent(context, r, getIndent(editor^.tabWidth));
    }
    case (LEFT) {
      if (lshift)
        if (!data^.selectionStart)
          data^.selectionStart = data^.getVisibleCursor(&data^.buffer);
      const cursor = data^.getVisibleCursor(&data^.buffer);
      if (!lshift && !!data^.selectionStart) {
        if (data^.selectionStart^.y < cursor.y ||
            (data^.selectionStart^.y == cursor.y && data^.selectionStart^.x < cursor.x))
          data^.cursor = *data^.selectionStart;
        data^.selectionStart = null;
      } else
      if (cursor.x == 0) {
        if (cursor.y > 0) {
          --data^.cursor.y;
          data^.cursor.x = data^.buffer.text[data^.cursor.y].size();
        }
      } else {
        data^.cursor.x = cursor.x - 1;
        if (lctrl) {
          const charState = isalnum(data^.buffer.text[data^.cursor.y][data^.cursor.x]);
          while (data^.cursor.x > 0 &&
              isalnum(data^.buffer.text[data^.cursor.y][data^.cursor.x - 1]) == charState)
            --data^.cursor.x;
        }
      }
    }
    case (RIGHT) {
      if (lshift)
        if (!data^.selectionStart)
          data^.selectionStart = data^.getVisibleCursor(&data^.buffer);
      const cursor = data^.getVisibleCursor(&data^.buffer);
      if (!lshift && !!data^.selectionStart) {
        if (data^.selectionStart^.y > cursor.y ||
            (data^.selectionStart^.y == cursor.y && data^.selectionStart^.x > cursor.x))
          data^.cursor = *data^.selectionStart;
        data^.selectionStart = null;
      } else
      if (data^.cursor.x >= data^.buffer.text[data^.cursor.y].size()) {
        if (data^.cursor.y < data^.buffer.text.size() - 1) {
          ++data^.cursor.y;
          data^.cursor.x = 0;
        }
      } else {
        ++data^.cursor.x;
        if (lctrl) {
          const charState = isalnum(data^.buffer.text[data^.cursor.y][data^.cursor.x - 1]);
          while (data^.cursor.x < data^.buffer.text[data^.cursor.y].size() &&
              isalnum(data^.buffer.text[data^.cursor.y][data^.cursor.x]) == charState)
            ++data^.cursor.x;
        }
      }
    }
    case (C) {
      if (lctrl && !!data^.selectionStart) {
        context.canvas^.setClipboard(data^.buffer.getString(*data^.selectionStart, data^.getVisibleCursor(&data^.buffer)));
      } else
      return false;
    }
    case (X) {
      if (lctrl && !!data^.selectionStart) {
        context.canvas^.setClipboard(data^.buffer.getString(*data^.selectionStart, data^.getVisibleCursor(&data^.buffer)));
        data^.cursor = data^.buffer.erase(*data^.selectionStart, data^.getVisibleCursor(&data^.buffer));
        data^.selectionStart = null;
      } else
        return false;
    }
    case (V) {
      if (lctrl) {
        if (data^.selectionStart) {
          data^.cursor = data^.buffer.erase(*data^.selectionStart, data^.getVisibleCursor(&data^.buffer));
          data^.selectionStart = null;
        }
        mutable lines = breakLines(context.canvas^.getClipboard());
        if (const newIndent = data^.buffer.currentIndentation(data^.getVisibleCursor(&data^.buffer)))
          lines = changeIndentation(lines.copy(), *newIndent);
        const oldCursor = data^.cursor;
        const textCopy = data^.buffer.text.copy();
        for (it : lines) {
          data^.cursor = data^.buffer.onTextNoHistory(*it, data^.getVisibleCursor(&data^.buffer));
          if (it.index < lines.size() - 1)
            data^.cursor = data^.buffer.onEnterNoHistory(data^.getVisibleCursor(&data^.buffer), false);
        }
        data^.buffer.addHistory(move(textCopy), oldCursor, data^.cursor);
        data^.buffer.onEdited(null);
        scrollAfterCursorMoved(data, context.canvas^.getTextSize(" ", editor^.fontSize), r);
      } else
        return false;
    }
    case (SLASH) {
      if (lctrl && !!data^.selectionStart) {
        data^.cursor = data^.getVisibleCursor(&data^.buffer);
        mutable p1 = data^.cursor;
        mutable p2 = *data^.selectionStart;
        mutable endPtr = &*data^.selectionStart;
        if (p1.y > p2.y || (p1.y == p2.y && p1.x > p2.x)) {
          swap(&p1, &p2);
          endPtr = &data^.cursor;
        }
        discard data^.buffer.onText("*/", p2);
        discard data^.buffer.onText("/*", p1);
        *endPtr = p2 + vec2(p2.y == p1.y ? 4 : 2, 0);
      } else
      if (lctrl && !data^.selectionStart) {
        data^.cursor = data^.getVisibleCursor(&data^.buffer);
        mutable p1 = data^.cursor;
        mutable p2 = p1;
        if (p1.y > p2.y || (p1.y == p2.y && p1.x > p2.x))
          swap(&p1, &p2);
        const matches = [&] (vec2 pos, string text) {
          const res = data^.buffer.text[pos.y].substring(pos.x, text.size()) == text;
          return res;
        };
        while (!matches(p1, "/*")) {
          --p1.x;
          if (p1.x < 0) {
            --p1.y;
            p1.x = data^.buffer.text[p1.y].size() - 2;
          }
          if (p1.y <= 0 || matches(p1, "*/"))
            break;
        }
        while (!matches(p2, "*/")) {
          ++p2.x;
          if (p2.x > data^.buffer.text[p2.y].size() - 2) {
            ++p2.y;
            p2.x = 0;
          }
          if (p2.y >= data^.buffer.text.size() || matches(p2, "/*"))
            break;
        }
        if (matches(p1, "/*") && matches(p2, "*/")) {
          discard data^.buffer.erase(p2, p2 + vec2(2, 0));
          discard data^.buffer.erase(p1, p1 + vec2(2, 0));
        }
      } else
        return false;
    }
    case (Z) {
      if (lctrl) {
        if (const pos = data^.buffer.undo(data^.getVisibleCursor(&data^.buffer)))
          data^.cursor = *pos;
      } else
        return false;
    }
    case (R) {
      if (lctrl) {
        if (const pos = data^.buffer.redo(data^.getVisibleCursor(&data^.buffer)))
          data^.cursor = *pos;
      } else
        return false;
    }
    case (I) {
      if (lctrl) {
        for (lineInd = data^.buffer.text.size() - 1; lineInd >= 0; --lineInd) {
          const line = &data^.buffer.text[lineInd];
          if (line^.starts_with(&"#include ") || line^.starts_with(&"import ") ||
              line^.starts_with(&"export import ")) {
            state^.addCursorHistory(data^.cursor, data^.buffer.index);
            data^.cursor = vec2(line^.size(), lineInd);
            break;
          }
        }
      } else
        return false;
    }
    case (E) {
      if (lctrl) {
        mutable int? nextLine = null;
        for (d : data^.diagnostics) {
          const dist = (d^.startPos.y - data^.cursor.y + data^.buffer.text.size() - 1) % data^.buffer.text.size() + 1;
          if (!nextLine || dist < *nextLine)
            nextLine = dist;
        }
        if (nextLine) {
          state^.addCursorHistory(data^.cursor, data^.buffer.index);
          data^.cursor = vec2(0, (data^.cursor.y + *nextLine) % data^.buffer.text.size());
        }
      } else
        return false;
    }
    default {
      return false;
    }
  }
  scrollAfterCursorMoved(data, textSize, r);
  return true;
}

void scrollAfterCursorMoved(EditorUIData mutable* data, vec2 textSize, rectangle* r) {
  while (true) {
    const cursorPos = r^.v1 + textSize.pairwise_mult(data^.getVisibleCursor(&data^.buffer)- data^.scrollPos);
    if (data^.scrollPos.y > 0 && cursorPos.y < r^.v1.y + 20)
      --data^.scrollPos.y;
    else if (cursorPos.y > r^.v2.y - textSize.y)
      ++data^.scrollPos.y;
    else if (data^.scrollPos.x > 0 && cursorPos.x < r^.v1.x + 20)
      --data^.scrollPos.x;
    else if (cursorPos.x > r^.v2.x - textSize.x)
      ++data^.scrollPos.x;
    else
      break;
  }
}

export bool onMouseEvent(EditorUI* editor, UIContext context, rectangle* r, mouse_event* event) {
  const state = context.state^.get_state<EditorUIState>();
  const data = **context.data^.cast_to<EditorUIData mutable*>();
  switch (event^.type) {
    case (MOUSE_MOVEMENT) {
      const textSize = context.canvas^.getTextSize(" ", editor^.fontSize);
      state^.lastMousePos = (event^.pos - r^.v1).pairwise_div(textSize) + data^.scrollPos;
      if (state^.mouseSelection) {
        data^.cursor = (event^.pos - r^.v1).pairwise_div(textSize) + data^.scrollPos;
        data^.cursor.y = max(0, min(data^.buffer.text.size() - 1, data^.cursor.y));
        data^.cursor.x = min(data^.buffer.text[data^.cursor.y].size(), data^.cursor.x);
      }
      return false;
    }
    case (LEFT_RELEASED) {
      if (state^.mouseSelection) {
        if (data^.selectionStart == data^.cursor)
          data^.selectionStart = null;
        state^.mouseSelection = false;
      }
      return false;
    }
    case (LEFT) {
      if (!r^.contains(&event^.pos))
        return false;
      const textSize = context.canvas^.getTextSize(" ", editor^.fontSize);
      const curTime = current_time_milli();
      const clickPos = (event^.pos - r^.v1 + vec2(textSize.x / 2, 0)).pairwise_div(textSize) + data^.scrollPos;
      state^.addCursorHistory(data^.cursor, data^.buffer.index);
      data^.cursor.y = min(data^.buffer.text.size() - 1, clickPos.y);
      data^.cursor.x = min(data^.buffer.text[data^.cursor.y].size(), clickPos.x);
      if (curTime - state^.previousLeftClick.time < 500 && clickPos == state^.previousLeftClick.cursor) {
        data^.selectionStart = vec2(0, data^.cursor.y);
        if (data^.cursor.y < data^.buffer.text.size() - 1)
          data^.cursor = vec2(0, data^.cursor.y + 1);
        else
          data^.cursor = vec2(data^.buffer.text[data^.cursor.y].size(), data^.cursor.y);
      } else
      if (clickPos == data^.cursor && curTime - state^.lastLeftClick.time < 500 &&
          clickPos == state^.lastLeftClick.cursor) {
        const status = isalnum(data^.buffer.text[data^.cursor.y][data^.cursor.x]);
        mutable start = data^.cursor;
        while (start.x > 0 && isalnum(data^.buffer.text[start.y][start.x - 1]) == status)
          --start.x;
        mutable end = data^.cursor;
        while (end.x < data^.buffer.text[end.y].size() -1 &&
          isalnum(data^.buffer.text[end.y][end.x]) == status)
          ++end.x;
        data^.selectionStart = start;
        data^.cursor = end;
      } else {
        data^.selectionStart = data^.cursor;
        state^.mouseSelection = true;
      }
      state^.previousLeftClick = state^.lastLeftClick;
      state^.lastLeftClick = ClickEvent(curTime, clickPos);
    }
    case (WHEEL_UP) {
      data^.scrollPos.y = max(0, data^.scrollPos.y - editor^.mouseWheelStep);
    }
    case (WHEEL_DOWN) {
      data^.scrollPos.y += editor^.mouseWheelStep;
    }
    default {
      return false;
    }
  }
  return true;
}

export bool onTextEvent(EditorUI* editor, UIContext context, rectangle* r, string text) {
  const data = **context.data^.cast_to<EditorUIData mutable*>();
  if (data^.selectionStart) {
    data^.cursor = data^.buffer.erase(*data^.selectionStart, data^.getVisibleCursor(&data^.buffer));
    data^.selectionStart = null;
  }
  data^.cursor = data^.buffer.onText(text, data^.getVisibleCursor(&data^.buffer));
  scrollAfterCursorMoved(data, context.canvas^.getTextSize(" ", editor^.fontSize), r);
  return true;
}
