import "std/io.znn";
export import "std/hash_map.znn";
export import "std/hash_set.znn";
export import "std/box.znn";
export import "std/vector.znn";
export import "ui/vec2.znn";
import "std/enum.znn";
import "std/io.znn";

import "json.znn";
import "util.znn";

export embed {
 #include "lsp_client_base.h"
}

export extern struct LspClientBase;

LspClientBase getLspClientBase(string command, vector<string>* args, bool serverStderr) {
  embed {
    std::vector<std::string> argsCopy;
    for (auto& a : *args)
      argsCopy.push_back(a.data());
    return LspClientBase(command.data(), argsCopy, serverStderr);
  }
}

export struct LspDefinitionResult {
  vec2 position;
  string file;
};

export LspDefinitionResult copy(LspDefinitionResult*) = default;

export struct LspCompletionOption {
  string label;
  string text;
  int numErased;
  int kind;
};

export LspCompletionOption copy(LspCompletionOption*) = default;

export struct LspCompletionResult {
  vec2 position;
  vector<LspCompletionOption> options;
};

export enum LspDiagnosticSeverity {
  ERROR,
  WARNING,
  INFORMATION,
  HINT
};

export struct LspDiagnosticLocation {
  vec2 startPos;
  vec2 endPos;
  string text;
  LspDiagnosticSeverity severity;
};

export LspDiagnosticLocation implicit_copy(LspDiagnosticLocation*) = default;

export struct LspDiagnostic {
  string file;
  vector<LspDiagnosticLocation> locations;
};

export struct LspSignature {
  string file;
  vec2 position;
  vector<string> elems;
};

export LspSignature copy(LspSignature*) = default;

export struct LspHoverResult {
  vector<string> content;
  string file;
  vec2 startPos;
  vec2 endPos;
};

export LspHoverResult copy(LspHoverResult*) = default;

export union LspMessage {
  vector<LspDefinitionResult> referencesResult;
  LspDiagnostic diagnostic;
  LspCompletionResult completionResult;
  LspSignature signature;
  LspHoverResult hover;
};

export struct LspClient {
  LspClientBase client;
  hash_map<int, box<invoke<LspMessage?, LspClient mutable*, json>>> constructors;
  int resultId;
  hash_map<string, int> documentVersions;
  hash_set<string> capabilities;
  bool restart;
};

using ResponseConstructor = invoke<LspMessage?, LspClient mutable*, json>;

export LspClient(string command, vector<string>* args, bool serverStderr) {
  return LspClient::LspClient(
      .client = getLspClientBase(move(command), move(args), serverStderr),
      .constructors = hash_map<int, box<invoke<LspMessage?, LspClient mutable*, json>>>(),
      .resultId = 0,
      .documentVersions = hash_map<string, int>(),
      .capabilities = hash_set<string>(),
      .restart = false
  );
}

void sendMessage(LspClient mutable* client, string message) {
  embed {
    if (!client->client.sendMessage(message.data()))
      client->restart = true;
  }
}

string? readMessage(LspClient mutable* client) {
  embed {
    if (auto msg = client->client.readMessage()) {
      if (!msg->empty())
        return zenon_string::owned(msg->data());
    } else
      client->restart = true;
  }
  return null;
}

string urlDecode(string src) {
  mutable ret = "";
  for (i = 0; i < src.size(); ++i) {
    if (src[i] == '%') {
      mutable ch = ' ';
      embed {
        int ii;
        sscanf(src.data() + i + 1, "%x", &ii);
        ch=static_cast<char>(ii);
        i += 2;
      }
      ret += ch;
    } else
      ret += src[i];
  }
  return move(ret);
}

string uriToPath(string uri) {
  assert(uri.starts_with(&"file://"));
  return uri.substring_slow("file://".size()).urlDecode();
}

export LspMessage? getMessage(LspClient mutable* client) {
  const msg = try client^.readMessage();
  mutable jarr = json_parse(msg);
  if (!jarr) {
    printf("Parsing error {jarr.error}\n");
    printf("{msg}\n");
    printf("========\n");
    return null;
  }
  const j = &jarr^[0];
  printf("Message {j^.dump(2)}\n");
  if (j^.contains("result")) {
    const id = j^["id"].get<int>();
    if (client^.constructors.contains(&id))
      return client^.constructors.get(&id)^^(client, j^["result"].copy());
  }
  if (j^.contains("method") && j^["method"] == json("textDocument/publishDiagnostics")) {
    mutable ret = vector<LspDiagnosticLocation>();
    const file = uriToPath(j^["params"]["uri"].get<string>());
    for (elem : j^["params"]["diagnostics"]) {
      ret.push_back(LspDiagnosticLocation(
        vec2(elem^["range"]["start"]["character"].get<int>(),
            elem^["range"]["start"]["line"].get<int>()),
        vec2(elem^["range"]["end"]["character"].get<int>(),
            elem^["range"]["end"]["line"].get<int>()),
        elem^["message"].get<string>(),
        from_int<LspDiagnosticSeverity>(elem^["severity"].get<int>() - 1)
      ));
    }
    return LspMessage::diagnostic(LspDiagnostic(file, move(ret)));
  }
  return null;
}

json getPosition(vec2 pos) {
  return json_object()
      .set("line", json(pos.y))
      .set("character", json(pos.x));
}

json getMethod(string method, int? id, json params) {
  mutable obj = json_object()
      .set("jsonrpc", json("2.0"))
      .set("method", json(method))
      .set("params", move(params));
  if (id)
    obj.set("id", json(*id));
  return move(obj);
}

json getUri(string path) {
  return json_object()
      .set("uri", json("file://" + move(path)));
}

export void sendDefinitionRequest(LspClient mutable* client, string path, vec2 position) {
  const j = getMethod("textDocument/definition", client^.resultId, json_object()
      .set("textDocument", getUri(path))
      .set("position", getPosition(position)));
  client^.constructors.insert(client^.resultId, [](LspClient mutable*, mutable json j) -> LspMessage? {
    if (!j.is_array()) {
      mutable ar = json_array();
      ar.push_back(j.copy());
      j = move(ar);
    }
    mutable ret = vector<LspDefinitionResult>();
    for (elem : j) {
      ret.push_back(LspDefinitionResult(
        vec2(elem^["range"]["start"]["character"].get<int>(),
            elem^["range"]["start"]["line"].get<int>()),
        uriToPath(elem^["uri"].get<string>())
      ));
    }
    return LspMessage::referencesResult(move(ret));
  }.box_as<ResponseConstructor>());
  client^.sendMessage(j.dump());
  ++client^.resultId;
}

export bool sendHoverRequest(LspClient mutable* client, string path, vec2 position) {
  if (!client^.capabilities.contains(&"hoverProvider"))
    return false;
  const j = getMethod("textDocument/hover", client^.resultId, json_object()
      .set("textDocument", getUri(path))
      .set("position", getPosition(position)));
  client^.constructors.insert(client^.resultId, [path, position](LspClient mutable* client, mutable json j) -> LspMessage? {
    mutable startPos = position;
    mutable endPos = position;
    mutable content = vector<string>();
    if (!j.is_null())
      content = breakLines(j["contents"]["value"].get<string>());
    if (j.contains("range")) {
      startPos = vec2(j["range"]["start"]["character"].get<int>(), j["range"]["start"]["line"].get<int>());
      endPos = vec2(j["range"]["end"]["character"].get<int>(), j["range"]["end"]["line"].get<int>());
    }
    return LspMessage::hover(LspHoverResult(
      move(content),
      path,
      startPos,
      endPos
    ));
  }.box_as<ResponseConstructor>());
  client^.sendMessage(j.dump());
  ++client^.resultId;
  return true;
}

export bool sendSignatureRequest(LspClient mutable* client, string path, vec2 position) {
  if (!client^.capabilities.contains(&"signatureHelpProvider"))
    return false;
  const j = getMethod("textDocument/signatureHelp", client^.resultId, json_object()
      .set("textDocument", getUri(path))
      .set("position", getPosition(position)));
  client^.constructors.insert(client^.resultId, [path, position](LspClient mutable* client, mutable json j) -> LspMessage? {
    mutable labels = vector<string>();
    for (elem : j["signatures"])
      labels.push_back(elem^["label"].get<string>());
    return LspMessage::signature(LspSignature(path, position, move(labels)));
  }.box_as<ResponseConstructor>());
  client^.sendMessage(j.dump());
  ++client^.resultId;
  return true;
}

export void sendReferencesRequest(LspClient mutable* client, string path, vec2 position) {
  const j = getMethod("textDocument/references", client^.resultId, json_object()
      .set("textDocument", getUri(path))
      .set("position", getPosition(position))
      .set("context", json_object().set("includeDeclaration", json(true))));
  client^.constructors.insert(client^.resultId, [](LspClient mutable* client, mutable json j) -> LspMessage? {
    mutable ret = vector<LspDefinitionResult>();
    for (elem : j) {
      ret.push_back(LspDefinitionResult(
        vec2(elem^["range"]["start"]["character"].get<int>(),
            elem^["range"]["start"]["line"].get<int>()),
        uriToPath(elem^["uri"].get<string>())
      ));
    }
    return LspMessage::referencesResult(move(ret));
  }.box_as<ResponseConstructor>());
  client^.sendMessage(j.dump());
  ++client^.resultId;
}

export void sendCompletionRequest(LspClient mutable* client, string path, vec2 position) {
  const j = getMethod("textDocument/completion", client^.resultId, json_object()
      .set("textDocument", getUri(path))
      .set("position", getPosition(position)));
  client^.constructors.insert(client^.resultId, [position](LspClient mutable* client, mutable json j) -> LspMessage? {
    mutable options = vector<LspCompletionOption>();
    for (elem : j["items"]) {
      const rangeInfo = elem^["textEdit"]["range"].copy();
      mutable label = elem^["label"].get<string>();
      if (elem^.contains("detail"))
        label = elem^["detail"].get<string>() + label;
      mutable text = elem^["textEdit"]["newText"].get<string>();
      const kind = elem^["kind"].get<int>();
      options.push_back(LspCompletionOption(
          move(label),
          move(text),
          rangeInfo["end"]["character"].get<int>() - rangeInfo["start"]["character"].get<int>(),
          kind
      ));
    }
    return LspMessage::completionResult(LspCompletionResult(
      position,
      move(options)
    ));
  }.box_as<ResponseConstructor>());
  client^.sendMessage(j.dump());
  ++client^.resultId;
}

export void sendFileChangedNotification(LspClient mutable* client, string path, string* content) {
  if (const version = client^.documentVersions.get_maybe(&path)) {
    mutable ar = json_array();
    ar.push_back(json_object().set("text", json(*content)));
    const j = getMethod("textDocument/didChange", null, json_object()
      .set("textDocument", getUri(path).set("version", json(**version)))
      .set("contentChanges", move(ar)));
    client^.sendMessage(j.dump());
  } else
    client^.sendFileOpenedNotification(path, content);
}

export void sendFileOpenedNotification(LspClient mutable* client, string path, string* content) {
  client^.documentVersions.insert(path, 0);
  const j = getMethod("textDocument/didOpen", null, json_object()
    .set("textDocument", getUri(path)
        .set("version", json(0))
        .set("languageId", json("cpp"))
        .set("text", json(*content))
    ));
  client^.sendMessage(j.dump());
}

export void initialize(LspClient mutable* client, string homeDir) {
  mutable params = json_object();
  const j = getMethod("initialize", client^.resultId, json_object()
      .set("capabilities", json_object()
          .set("textDocument", json_object()
              .set("completion", json_object()
                  .set("snippetSupport", json(true))
              )
              .set("signatureHelp", json_object()
                  .set("signatureInformation", json_object()
                      .set("parameterInformation", json_object()
                          .set("labelOffsetSupport", json(true))
                      )
                  )
              )
          )
          .set("workspace", json_object()
              .set("applyEdit", json(true))
              .set("didChangeWatchedFiles", json_object()
                  .set("dynamicRegistration", json(true))
              )
          )
      )
      .set("rootPath", json(homeDir))
      .set("rootUri", json("file://" + homeDir))
      .set("trace", json("off"))
  );
  client^.constructors.insert(0, [](LspClient mutable* client, mutable json j) -> LspMessage? {
    j = j["capabilities"].copy();
    const check = [&](string name) {
      if (j.contains(name) && (!j[name].is<bool>() || !!j[name].get<bool>()))
        client^.capabilities.insert(name);
    };
    check("signatureHelpProvider");
    check("hoverProvider");
    return null;
  }.box_as<ResponseConstructor>());
  client^.sendMessage(j.dump());
  ++client^.resultId;
}
