import "std/io.znn";
import "std/flags.znn";
import "std/panic.znn";
import "std/vector.znn";
import "std/box.znn";
import "std/time.znn";

import "ui/data.znn";
import "ui/ui.znn";
import "ui/reader.znn";
import "sdl/sdl.znn";
import "sdl/surface.znn";
import "sdl/canvas.znn";
import "sdl/event.znn";
import "sdl/ttf.znn";
import "pretty_input.znn";

import "editor_ui.znn";
import "scrollbar_ui.znn";
import "highlighter.znn";
import "program_state.znn";
import "lsp_client.znn";

box<UIElement>!string readUIFrom(string path) {
  const content = *open_file_r(path)^.read_content();
  mutable stream = try create_input_stream(content);
  stream.add_concept_mapping<UIElement, EditorUI>("editor");
  stream.add_concept_mapping<UIElement, ScrollbarUI>("scrollbar");
  stream.register_ui_elems();
  return stream.read_data<box<UIElement>>();
}

export bool round_brackets(pretty_dummy_struct<EditorUI>) {
  return true;
}

export bool round_brackets(pretty_dummy_struct<ScrollbarUI>) {
  return true;
}

struct Flags {
  bool noPanicHandler;
  string? font;
  vector<string> all;
};

void updateOutOfDateContent(SDLWindow* window, ProgramState mutable* programState) {
  for (elem : programState^.editorData)
    if (const path = programState^.paths[elem.index]) {
      if (const modTime = get_modification_time(*path)) {
        if (modTime != elem^.buffer.origLastModified) {
          elem^.buffer.origLastModified = *modTime;
          if (elem^.buffer.origText != elem^.buffer.text &&
              !*window^.sdl_prompt("File has been overwritten",
                  "File {*path} has been overwritten, but has unsaved changes. Load new content, losing all changes?"))
            continue;
          const currentContent = breakLines(*open_file_r(*path)^.read_content());
          elem^.buffer.origText = currentContent.copy();
          elem^.buffer.text = move(currentContent);
          elem^.buffer.lspUpdated = false;
        }
      } else
        programState^.paths[elem.index] = null;
    }
}

int main(string[] args) {
  const flags = *read_flags<Flags>(args);
  const panic_handler = [](string s) { printf("{s}\n"); exit(0); };
  if (!flags.noPanicHandler)
    set_panic_handler(&panic_handler);
  *sdl_init();
  const dataDir = sdl_data_directory_path();
  mutable ui = *readUIFrom(dataDir + "ui.txt");
  mutable lspClient = LspClient("clangd", {"--background-index"}.as_vector());
  lspClient.initialize();
  const window = *sdl_create_window(vec2(1280, 720), "ZIM", true);
  mutable font = *window.loadSDLFont(flags.font ?? dataDir + "font.ttf", 10, 100);
  const canvas = SDLCanvas(&window, &font, hash_map<string, sdl_texture>(),
      *window.make_target_texture(vec2(100, 100)));
  mutable paths = vector<string?>();
  for (elem : flags.all)
    paths.push_back(get_canonical_path(*elem));
  if (paths.empty()) {
    mutable string? a = null;
    paths.push_back(move(a));
  }
  mutable uiBounds = rectangle(vec2(0, 0), window.size());
  mutable programState = ProgramState(
      move(paths),
      Highlighter("/usr/share/source-highlight/", "zenon.lang")
  );
  for (path : programState.paths) {
    programState.bufferOrder.push_back(path.index);
    const content = !!*path ? *open_file_r(**path)^.read_content() : "";
    programState.editorData.push_back(EditorUIData(
      Buffer(path.index, !!*path ? *get_modification_time(**path) : 0, move(content)),
      vec2(0, 0),
      vec2(0, 0),
      null,
      &programState.highlighter,
      vector<LspDiagnosticLocation>()
    ));
  }
  mutable exit = false;
  programState.addPermanentCallbacks(&exit, &lspClient);
  programState.uiData.insert("ui_refresh_callback", [&] {
    programState.toDo.push_back([&] {
      if (const res = readUIFrom(dataDir + "ui.txt"))
        ui = *move(res);
      else
        printf(res.get_error());
    }.box_as<invoke<void>>());
  }.box_as<UICallback>().box_as<any>());
  mutable eventsState = SDLEventsState();
  mutable lastContentCheck = current_time_milli();
  while (!exit) {
    programState.handleLspMessages(&lspClient);
    if (current_time_milli() > lastContentCheck + 500) {
      lastContentCheck = current_time_milli();
      window.updateOutOfDateContent(&programState);
      programState.updateLspContent(&lspClient);
    }
    window.setTitle(programState.getBufferName(programState.currentBuffer));
    while (!programState.toDo.empty()) {
      programState.toDo.back()^^();
      discard programState.toDo.pop_back();
    }
    programState.addConditionalCallbacks();
    programState.addOverlayCallbacks(&canvas);
    const context = UIContext(&canvas, &programState.uiData, &programState.uiState, 0.1);
    for (event : eventsState.getEvents()) {
      switch (*event) {
        case (windowResized) {
          uiBounds = rectangle(vec2(0, 0), windowResized);
        }
        case (quit) { return 0; }
        case (key) {
          discard ui^.onKeyEvent(context, &uiBounds, &key);
        }
        case (mouse) {
          discard ui^.onMouseEvent(context, &uiBounds, &mouse);
        }
        case (text) {
          discard ui^.onTextEvent(context, &uiBounds, text);
        }
        default {}
      }
    }
    ui^.render(context, &uiBounds);
    window.update();
  }
  return 0;
}
