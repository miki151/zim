import "sdl.znn";
import "sdl_surface.znn";
import "sdl_canvas.znn";
import "ui.znn";
import "std/io.znn";
import "ui_reader.znn";
import "sdl_ttf.znn";
import "ui_data.znn";
import "std/enum_set.znn";
import "std/enum.znn";
import "std/time.znn";
import "std/flags.znn";
import "std/panic.znn";
import "pretty_input.znn";
import "editor_ui.znn";
import "std/vector.znn";
import "sdl_event.znn";
import "scrollbar_ui.znn";
import "dialogs.znn";

box<UIElement>!string readUIFrom(string path) {
  const content = *open_file_r(path)^.read_content();
  mutable stream = try create_input_stream(content);
  stream.add_concept_mapping<UIElement, EditorUI>("editor");
  stream.add_concept_mapping<UIElement, ScrollbarUI>("scrollbar");
  stream.register_ui_elems();
  return stream.read_data<box<UIElement>>();
}

export bool round_brackets(pretty_dummy_struct<EditorUI>) {
  return true;
}

export bool round_brackets(pretty_dummy_struct<ScrollbarUI>) {
  return true;
}

struct Flags {
  bool noPanicHandler;
  string? font;
  vector<string> all;
};

template <Types...> requires copy<Types>...
UIRecord createRecord(string[] names, Types... values) {
  mutable ret = UIRecord();
  static for (i = 0; i < countof(values); ++i) {
    ret.insert(names[i], values...[i].copy().box_as<any>());
  }
  return move(ret);
}

void setPrompt(UIRecord mutable* uiData, string question, box<invoke<void>> callback_yes,
    box<invoke<void>> callback_no) {
  uiData->insert("prompt_callback_yes", [move(callback_yes), uiData] {
    callback_yes^();
    uiData->erase(&"prompt_callback_yes");
    uiData->erase(&"prompt_callback_no");
    uiData->erase(&"prompt_text");
  }.box_as<UICallback>().box_as<any>());
  uiData->insert("prompt_callback_no", [move(callback_no), uiData] {
    callback_no^();
    uiData->erase(&"prompt_callback_yes");
    uiData->erase(&"prompt_callback_no");
    uiData->erase(&"prompt_text");
  }.box_as<UICallback>().box_as<any>());
  uiData->insert("prompt_text", question.box_as<any>());
}

bool isContentUpdated(vector<string>* paths, vector<EditorUIData>* data) {
  for (path : *paths)
    if (*open_file_r(*path)^.read_content() != data^[path.index].buffer.joinLines())
      return false;
  return true;
}

box<UICallback> getExitCallback(UIRecord mutable* uiData, vector<EditorUIData>* editorData, bool mutable* exit,
    SDLEventsState mutable* eventsState, bool mutable* flushEvents, vector<string>* paths,
    string? mutable* searchEntry) {
  return [uiData, editorData, exit, eventsState, flushEvents, paths, searchEntry] {
    if (*searchEntry) {
      *searchEntry = null;
      return;
    }
    if (isContentUpdated(paths, editorData))
      *exit = true;
    else
      setPrompt(uiData, "Exit?",
          [exit] { *exit = true; }.box_as<invoke<void>>(),
          [eventsState, flushEvents] {
            *flushEvents = true;
            discard eventsState->getEvents();
          }.box_as<invoke<void>>()
      );
  }.box_as<UICallback>();
}

void insertBufferSwitchCallbacks(UIRecord mutable* uiData, int? mutable* nextBuffer, vector<string>* paths,
    vector<int> mutable* bufferOrder, int mutable* currentBuffer) {
  if (*nextBuffer) {
    mutable v = vector<box<any>>();
    for (i : range(0, paths^.size())) {
      mutable r = UIRecord();
      r.insert("text", paths^[bufferOrder^[i]].box_as<any>());
      if (i == **nextBuffer)
        r.insert("selected", 1.box_as<any>());
      v.push_back(move(r).box_as<any>());
    }
    uiData^.insert("next_buffer_path", move(v).box_as<any>());
    uiData^.insert("switch_buffer_callback2", [currentBuffer, bufferOrder, nextBuffer] {
        *currentBuffer = bufferOrder^[**nextBuffer];
        bufferOrder^.remove(*bufferOrder^.find(currentBuffer));
        bufferOrder^.insert(0, *currentBuffer);
        *nextBuffer = null;
        }.box_as<UICallback>().box_as<any>());
    uiData^.insert("switch_buffer_callback_up", [paths, nextBuffer] {
        *nextBuffer = (**nextBuffer - 1 + paths^.size()) % paths^.size();
        }.box_as<UICallback>().box_as<any>());
    uiData^.insert("switch_buffer_callback_down", [paths, nextBuffer] {
        *nextBuffer = (**nextBuffer + 1) % paths^.size();
        }.box_as<UICallback>().box_as<any>());
  } else {
    uiData^.erase(&"switch_buffer_callback_up");
    uiData^.erase(&"switch_buffer_callback_down");
    uiData^.erase(&"switch_buffer_callback2");
    uiData^.erase(&"next_buffer_path");
  }
}

void insertSearchCallbacks(UIRecord mutable* uiData, string? mutable* searchEntry, bool mutable* lineSearch,
    string? mutable* lastSearchedText, UIState mutable* uiState, SDLCanvas* canvas) {
  if (*searchEntry) {
    uiData^.insert("search_paste_callback", [searchEntry, canvas] {
      *searchEntry = **searchEntry + canvas->getClipboard();
    }.box_as<UICallback>().box_as<any>());
    uiData^.insert("search_confirm", [searchEntry, uiState, lastSearchedText, lineSearch]() {
      if (*lineSearch) {
        if (const n = searchEntry^^.to_int())
          uiState^.get_state<EditorUIState>()->searchedLine = n;
      } else {
        *lastSearchedText = *searchEntry;
        uiState^.get_state<EditorUIState>()->searchedText = *searchEntry;
      }
      *searchEntry = null;
    }.box_as<UICallback>().box_as<any>());
    uiData^.insert("search_entry", [searchEntry](TextCallbackParam param) {
      switch (param) {
        case (text) {
          **searchEntry += text;
        }
        case (backspace) {
          if (!searchEntry^^.empty())
            *searchEntry = searchEntry^^.substring(0, searchEntry^^.size() - 1);
        }
      }
    }.box_as<UITextCallback>().box_as<any>());
    uiData^.insert("search_content", box_as<any>(**searchEntry));
  } else {
    uiData^.erase(&"search_entry");
    uiData^.erase(&"search_confirm");
    uiData^.erase(&"search_content");
    uiData^.erase(&"search_paste_callback");
  }
}

box<UICallback> getOpenFileCallback(vector<string> mutable* paths, vector<int> mutable* bufferOrder,
    vector<EditorUIData> mutable* editorData, vector<box<invoke<void>>> mutable* toDo, int mutable* currentBuffer) {
  return [paths, bufferOrder, editorData, toDo, currentBuffer] {
    toDo^.push_back([paths, bufferOrder, editorData, toDo, currentBuffer] {
      for (file : getOpenFiles("Open file(s):")) {
        if (!paths^.find(&*file)) {
          paths^.push_back(*file);
          bufferOrder^.insert(0, paths^.size() - 1);
          editorData^.push_back(EditorUIData(
            Buffer(*open_file_r(*file)^.read_content()),
            vec2(0, 0),
            0,
            null
          ));
          *currentBuffer = editorData^.size() - 1;
        }
      }
    }.box_as<invoke<void>>());
  }.box_as<UICallback>();
}

int main(string[] args) {
  const flags = *read_flags<Flags>(args);
  const panic_handler = [](string s) { printf("{s}\n"); exit(0); };
  if (!flags.noPanicHandler)
    set_panic_handler(&panic_handler);
  *sdl_init();
  mutable paths = flags.all.transform([](string* path) { return get_canonical_path(*path); });
  mutable ui = *readUIFrom("ui.txt");
  const window = *sdl_create_window(vec2(1280, 720), "ZIM");
  mutable font = *window.loadSDLFont(flags.font ?? "font.ttf", 10, 100);
  const getCanvas = [&] {
    const textTexture = *window.make_target_texture(vec2(100, 100));
    const gameSprites = hash_map<string, sdl_texture>();
    return SDLCanvas(&window, &font, move(gameSprites), move(textTexture));
  };
  mutable canvas = getCanvas();
  mutable uiBounds = rectangle(vec2(0, 0), window.size());
  mutable exit = false;
  mutable lastUpdate = current_time_milli();
  mutable uiData = UIRecord();
  mutable flushEvents = false;
  mutable eventsState = SDLEventsState();
  mutable uiState = UIState();
  mutable currentBuffer = 0;
  mutable int? nextBuffer = null;
  mutable editorData = vector<EditorUIData>();
  mutable bufferOrder = vector<int>();
  for (path : paths) {
    bufferOrder.push_back(path.index);
    editorData.push_back(EditorUIData(
      Buffer(*open_file_r(*path)^.read_content()),
      vec2(0, 0),
      0,
      null
    ));
  }
  mutable string? lastSearchedText = null;
  mutable string? searchEntry = null;
  mutable bool lineSearch = false;
  uiData.insert("exit_callback", getExitCallback(&uiData, &editorData, &exit, &eventsState, &flushEvents, &paths,
      &searchEntry)
      .box_as<any>());
  uiData.insert("switch_buffer_callback1", [&] {
    nextBuffer = (nextBuffer ?? 0 + 1) % editorData.size();
  }.box_as<UICallback>().box_as<any>());
  uiData.insert("save_callback", [&editorData, &paths] {
    for (elem : editorData)
      if (const file = open_file_w(paths[elem.index])) {
        file->printf(elem->buffer.joinLines());
    }
  }.box_as<UICallback>().box_as<any>());
  mutable toDo = vector<box<invoke<void>>>();
  uiData.insert("open_file_callback",
      getOpenFileCallback(&paths, &bufferOrder, &editorData, &toDo, &currentBuffer).box_as<any>());
  uiData.insert("search_callback", [&searchEntry] {
      searchEntry = "";
  }.box_as<UICallback>().box_as<any>());
  uiData.insert("line_search_callback", [&searchEntry, &lineSearch] {
      searchEntry = "";
      lineSearch = true;
  }.box_as<UICallback>().box_as<any>());
  uiData.insert("search_repeat_callback", [&uiState, &lastSearchedText] {
    if (lastSearchedText)
      uiState.get_state<EditorUIState>()->searchedText = *lastSearchedText;
  }.box_as<UICallback>().box_as<any>());
  while (!exit) {
    while (!toDo.empty()) {
      toDo.back()^^();
      discard toDo.pop_back();
    }
    insertBufferSwitchCallbacks(&uiData, &nextBuffer, &paths, &bufferOrder, &currentBuffer);
    insertSearchCallbacks(&uiData, &searchEntry, &lineSearch, &lastSearchedText, &uiState, &canvas);
    if (isContentUpdated(&paths, &editorData))
      uiData.insert("no_changes", 1.box_as<any>());
    else
      uiData.erase(&"no_changes");
    uiData.insert("editor", box_as<any>(&editorData[currentBuffer]));
    uiData.insert("buffer_name", (paths[currentBuffer] +
        " {editorData[currentBuffer].cursor + vec2(1, 1)}").box_as<any>());
    const curTime = current_time_milli();
    const timeDiff = 0.001 * (curTime - lastUpdate);
    lastUpdate = curTime;
    const context = UIContext(&canvas, &uiData, &uiState, timeDiff);
    for (event : eventsState.getEvents()) {
      if (exit || flushEvents) {
        flushEvents = false;
        break;
      }
      switch (*event) {
        case (windowResized) {
          uiBounds = rectangle(vec2(0, 0), windowResized);
        }
        case (quit) { return 0; }
        case (key) {
          if (key.key == key_type::F1 && key.type == key_event_type::DOWN) {
            canvas = getCanvas();
            if (const res = readUIFrom("ui.txt"))
              ui = *move(res);
            else
              printf(res.get_error());
            } else
            discard ui^.onKeyEvent(context, &uiBounds, &key);
        }
        case (mouse) {
          discard ui^.onMouseEvent(context, &uiBounds, &mouse);
        }
        case (text) {
          discard ui^.onTextEvent(context, &uiBounds, text);
        }
        default {}
      }
    }
    ui^.render(context, &uiBounds);
    window.update();
  }
  return 0;
}
