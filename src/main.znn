import "std/io.znn";
import "std/flags.znn";
import "std/panic.znn";
import "std/vector.znn";
import "std/box.znn";
import "std/time.znn";

import "ui/data.znn";
import "ui/ui.znn";
import "ui/reader.znn";
import "sdl/sdl.znn";
import "sdl/surface.znn";
import "sdl/canvas.znn";
import "sdl/event.znn";
import "sdl/ttf.znn";
import "pretty_input.znn";

import "editor_ui.znn";
import "scrollbar_ui.znn";
import "highlighter.znn";
import "program_state.znn";
import "lsp_client.znn";
import "lsp_client_map.znn";
import "util.znn";
import "scrolling_list_ui.znn";

box<UIElement>!string readUIFrom(string path) {
  const content = *open_file_r(path)^.read_content();
  mutable stream = try create_input_stream(content);
  stream.add_concept_mapping<UIElement, EditorUI>("editor");
  stream.add_concept_mapping<UIElement, ScrollbarUI>("scrollbar");
  stream.add_concept_mapping<UIElement, ScrollingListUI>("scrolling_list");
  stream.register_ui_elems();
  return stream.read_data<box<UIElement>>();
}

export bool round_brackets(pretty_dummy_struct<EditorUI>) {
  return true;
}

export bool round_brackets(pretty_dummy_struct<ScrollbarUI>) {
  return true;
}

export bool round_brackets(pretty_dummy_struct<ScrollingListUI>) {
  return true;
}

struct Flags {
  bool noPanicHandler;
  string? font;
  vector<string> all;
  bool lspStderr;
  bool noLsp;
};

bool updateOutOfDateContent(SDLWindow* window, ProgramState mutable* programState) {
  mutable toClose = vector<int>();
  for (elem : programState^.editorData)
    if (const path = programState^.paths[elem.index]) {
      if (const modTime = get_modification_time(*path)) {
        if (modTime != elem^.buffer.origLastModified) {
          elem^.buffer.origLastModified = *modTime;
          if (elem^.buffer.origText != elem^.buffer.text &&
              !*window^.sdl_prompt("File has been overwritten",
                  "File {*path} has been overwritten, but has unsaved changes. Load new content, losing all changes?"))
            continue;
          const currentContent = breakLines(*open_file_r(*path)^.read_content());
          elem^.buffer.origText = currentContent.copy();
          elem^.buffer.text = move(currentContent);
          elem^.buffer.lspUpdated = false;
        }
      }
      else if (elem^.buffer.origLastModified)
        toClose.push_back(elem.index);
    }
  toClose.sort(&[](int* a, int* b) { return *a > *b; });
  for (index : toClose) {
    if (programState^.paths.size() == 1) {
      if (*window^.sdl_prompt("File has been removed",
          "File {*programState^.paths[*index]} has been removed. Exit editor, losing all changes?"))
        return true;
      else
        programState^.editorData[*index].buffer.origLastModified = null;
    } else {
      if (*window^.sdl_prompt("File has been removed",
          "File {*programState^.paths[*index]} has been removed. Close the buffer, losing all changes?")) {
        programState^.closeBuffer(*index);
      } else {
        programState^.editorData[*index].buffer.origLastModified = null;
      }
    }
  }
  return false;
}

LspClientMap getLspClients(Flags* flags, string currentDir) {
  mutable lspClientMap = LspClientMap(
      .homeDir = currentDir,
  );
  if (!flags^.noLsp) {
    lspClientMap.addClient(
        LspClientInfo(
            .path = "clangd",
            .extensions = {"cpp", "h"}.as_vector(),
            .flags = {"--background-index"}.as_vector(),
            .serverStderr = flags^.lspStderr
        ));
    lspClientMap.addClient(
        LspClientInfo(
            .path = "/home/michal/zenon/zenon",
            .extensions = {"znn"}.as_vector(),
            .flags = {"--lsp"}.as_vector(),
            .serverStderr = flags^.lspStderr
        ));
  }
  return move(lspClientMap);
}

int main(string[] args) {
  const currentDir = get_canonical_path("./");
  const flags = *read_flags<Flags>(args);
  const panic_handler = [](string s) { printf("{s}\n"); exit(0); };
  if (!flags.noPanicHandler)
    set_panic_handler(&panic_handler);
  *sdl_init();
  const dataDir = sdl_data_directory_path();
  mutable ui = *readUIFrom(dataDir + "ui.txt");
  mutable lspClientMap = getLspClients(&flags, currentDir);
  const window = *sdl_create_window(vec2(1280, 720), "ZIM", dataDir + "icon.png", true);
  mutable font = *window.loadSDLFont(flags.font ?? dataDir + "font.ttf", 10, 100);
  const canvas = SDLCanvas(&window, &font, hash_map<string, sdl_texture>(),
      *window.make_target_texture(vec2(100, 100)));
  mutable paths = vector<string?>();
  for (elem : flags.all)
    paths.push_back(get_canonical_path(*elem));
  if (paths.empty()) {
    mutable string? a = null;
    paths.push_back(move(a));
  }
  mutable uiBounds = rectangle(vec2(0, 0), window.size());
  mutable programState = ProgramState(
      .paths = move(paths),
      .highlighter = Highlighter("/usr/share/source-highlight/", "zenon.lang"),
      .basePath = currentDir
  );
  for (path : programState.paths) {
    programState.bufferOrder.push_back(path.index);
    const content = (!!*path && path^^.file_exists()) ? *open_file_r(**path)^.read_content() : "";
    programState.editorData.push_back(EditorUIData(
      Buffer(path.index, (!!*path && path^^.file_exists()) ? get_modification_time(**path) : null, move(content)),
      vec2(0, 0),
      vec2(0, 0),
      null,
      &programState.highlighter,
      vector<LspDiagnosticLocation>(),
    ));
  }
  programState.bufferOrder.sort(&[&] (int* i1, int* i2) {
    return programState.editorData[*i1].buffer.origLastModified ?? 0.as_long() >
        programState.editorData[*i2].buffer.origLastModified ?? 0.as_long();
  });
  programState.currentBuffer = programState.bufferOrder[0];
  mutable exit = false;
  programState.addPermanentCallbacks(&exit, &lspClientMap);
  programState.uiData.insert("ui_refresh_callback", [&] {
    programState.toDo.push_back([&] {
      if (const res = readUIFrom(dataDir + "ui.txt"))
        ui = *move(res);
      else
        printf(res.get_error());
    }.box_as<invoke<void>>());
  }.box_as<UICallback>().box_as<any>());
  mutable eventsState = SDLEventsState();
  mutable lastContentCheck = current_time_milli();
  mutable lastLspRequest = current_time_milli();
  mutable lastOtherContentRequest = current_time_milli();
  mutable milliseconds_t? lastUnfocused = null;
  while (!exit) {
    const curTime = current_time_milli();
    if (!window.isFocused())
      lastUnfocused = curTime;
    for (client : lspClientMap.restartClients()) {
      discard window.sdl_prompt("LSP server crashed.", "LSP server {*client} has crashed and will be restarted in 10 seconds.");
      for (path : programState.paths)
        if (!!*path && !lspClientMap.getClient(**path))
          programState.editorData[path.index].buffer.lspUpdated = false;
    }
    programState.handleLspMessages(&lspClientMap);
    if (curTime > lastContentCheck + 500) {
      lastContentCheck = curTime;
      if (window.updateOutOfDateContent(&programState))
        break;
    }
    if (curTime > lastLspRequest + 500 && programState.updateCurrentLspContent(&lspClientMap))
      lastLspRequest = curTime;
    if (curTime > lastOtherContentRequest + 5000) {
      programState.updateOtherLspContent(&lspClientMap);
      lastOtherContentRequest = curTime;
    }
    window.setTitle(programState.getBufferName(programState.currentBuffer));
    while (!programState.toDo.empty()) {
      programState.toDo.back()^^();
      discard programState.toDo.pop_back();
    }
    programState.addConditionalCallbacks();
    programState.addOverlayCallbacks(&canvas);
    const context = UIContext(&canvas, &programState.uiData, &programState.uiState, 0.1);
    for (event : eventsState.getEvents()) {
      switch (*event) {
        case (windowResized) {
          uiBounds = rectangle(vec2(0, 0), windowResized);
        }
        case (quit) { return 0; }
        case (key) {
          // work around the bogus tab event on alt+tab bug in sdl
          if (key.key != key_type::TAB || !lastUnfocused || curTime > *lastUnfocused + 500)
            discard ui^.onKeyEvent(context, &uiBounds, &key);
        }
        case (mouse) {
          discard ui^.onMouseEvent(context, &uiBounds, &mouse);
        }
        case (text) {
          discard ui^.onTextEvent(context, &uiBounds, text);
        }
        default {}
      }
    }
    ui^.render(context, &uiBounds);
    window.update();
  }
  return 0;
}
