
export import "std/expected.znn";

export embed {
#include "nlohmann/json.hpp"
using nlohmann::json;
using json_iterator = json::iterator;
}

export extern struct json;

export json(int i) embed {
  json j = i;
  return j;
}

export json(bool b) embed {
  json j = b;
  return j;
}

export json(string s) embed {
  json j = s.data();
  return j;
}

export template<T> requires (T == int || T == string || T == bool)
T get(json* j) {
  static if (T == string) {
    embed {
      std::string s = j->get<std::string>();
      return zenon_string::owned(s.data());
    }
  } else {
    embed {
      return j->get<T>();
    }
  }
}

export template<T> requires (T == int || T == string || T == bool)
bool is(json* j) {
  static if (T == int)
    embed { return j->is_number(); }
  static if (T == bool)
    embed { return j->is_boolean(); }
  static if (T == string)
    embed { return j->is_string(); }
}

export bool contains(json* j, string s) embed {
  return j->contains(s.data());
}

export json* operator [] (json* j, string s) embed {
  return &(*j)[s.data()];
}

export extern json* operator [] (json* j, int index);

export [@member]
extern int size(json*);

export [@member]
extern bool empty(json*);

export [@member]
extern bool is_null(json*);

export [@member]
extern bool is_array(json*);

export json mutable* operator [] (json mutable* j, string s) embed {
  return &(*j)[s.data()];
}

export json set(mutable json j, string key, json value) {
  j[key] = move(value);
  return move(j);
}

export void set(json mutable* j, string key, json value) {
  j^[key] = move(value);
}

export extern bool operator == (json*, json*);

export json copy(json* j) embed {
  return *j;
}

export json json_object() embed {
  return json::object();
}

export json json_array() embed {
  return json::array();
}

export [@member]
extern void push_back(json mutable* array, json);

export string dump(json* j) embed {
  return zenon_string::owned(j->dump().data());
}

export string dump(json* j, int indent) embed {
  return zenon_string::owned(j->dump(indent).data());
}

export json!string json_parse(string s) {
  const getValue = [](json j) -> json!string {
    return move(j);
  };
  const getError = [](string s) -> json!string {
    return move(s);
  };
  embed {
    try {
      return invoke(&getValue, json::parse(s.data()));
    } catch (nlohmann::detail::parse_error e) {
      return invoke(&getError, zenon_string::owned(e.what()));
    }
  }
}

export extern struct json_iterator;

export json_iterator implicit_copy(json_iterator* it) embed {
  return *it;
}

export [@member]
extern json_iterator begin(json mutable* s);

export [@member]
extern json_iterator end(json mutable* s);

export extern json* operator *(json_iterator* it);

export extern json_iterator operator ++(json_iterator mutable* it);

export extern bool operator == (json_iterator* it1, json_iterator* it2);